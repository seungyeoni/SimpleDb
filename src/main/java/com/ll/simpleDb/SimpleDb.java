package com.ll.simpleDb;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SimpleDb {
    private final Connection connection;
    private boolean devMode;

    public SimpleDb(String host, String username, String password, String dbName) {
        int port = 3306;

        String url = "jdbc:mysql://" + host + ":" + port + "/" + dbName
                + "?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul&useOldAliasMetadataBehavior=true&zeroDateTimeBehavior=convertToNull";

        connection = createConnection(url, username, password);
    }

    private Connection createConnection(String url, String username, String password) {
        try {
            return DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void setDevMode(boolean mode) {
        this.devMode = mode;
    }

    public Sql genSql() {
        return new Sql(this);
    }

    private void printRawSql(String sql) {
        if (devMode) {
            System.out.println("== rawSql ==");
            System.out.println(sql);
            System.out.println();
        }
    }

    private void setPreparedStatementParameters(PreparedStatement preparedStatement, Object[] args) throws SQLException {
        for (int i = 0; i < args.length; i++) {
            preparedStatement.setObject(i + 1, args[i]);
        }
    }

    private long executeSql(String sql, Object[] args, int autoGeneratedKeys) {
        printRawSql(sql);

        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys)) {
            setPreparedStatementParameters(preparedStatement, args);
            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                preparedStatement.executeUpdate();
                return getGeneratedKey(preparedStatement);
            } else {
                return preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private long getGeneratedKey(PreparedStatement preparedStatement) throws SQLException {
        ResultSet generatedKeys = preparedStatement.getGeneratedKeys();

        if (generatedKeys.next()) {
            return generatedKeys.getLong(1);
        } else {
            throw new RuntimeException("No generated key was returned after insert");
        }
    }

    private List<Map<String, Object>> selectSql(String sql, Object[] args) {
        List<Map<String, Object>> result;

        printRawSql(sql);

        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            setPreparedStatementParameters(preparedStatement, args);
            ResultSet resultSet = preparedStatement.executeQuery();

            result = extractResultRows(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return result;
    }

    private List<Map<String, Object>> extractResultRows(ResultSet resultSet) throws SQLException {
        List<Map<String, Object>> result = new ArrayList<>();
        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
        int columnCount = resultSetMetaData.getColumnCount();

        while (resultSet.next()) {
            Map<String, Object> row = new HashMap<>();

            for (int i = 1; i <= columnCount; i++) {
                String columnName = resultSetMetaData.getColumnLabel(i);
                Object columnValue = resultSet.getObject(i);
                row.put(columnName, columnValue);
            }

            result.add(row);
        }

        return result;
    }

    public void run(String sql, Object... args) {
        executeSql(sql, args, Statement.NO_GENERATED_KEYS);
    }

    public long runInsert(String sql, Object... args) {
        return executeSql(sql, args, Statement.RETURN_GENERATED_KEYS);
    }

    public long runUpdate(String sql, Object[] args) {
        return executeSql(sql, args, Statement.NO_GENERATED_KEYS);
    }

    public List<Map<String, Object>> runSelectRows(String sql, Object[] args) {
        return selectSql(sql, args);
    }
}