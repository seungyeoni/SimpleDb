package com.ll.simpleDb;

import java.sql.*;

public class SimpleDb {
    private final Connection connection;
    private boolean devMode;

    public SimpleDb(String host, String username, String password, String dbName) {
        int port = 3306;

        String url = "jdbc:mysql://" + host + ":" + port + "/" + dbName
                + "?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul&useOldAliasMetadataBehavior=true&zeroDateTimeBehavior=convertToNull";

        connection = createConnection(url, username, password); // 리팩토링: 예외 처리를 별도 메소드로 분리
    }

    // 리팩토링: 예외 처리를 위한 메소드를 추가
    private Connection createConnection(String url, String username, String password) {
        try {
            return DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void setDevMode(boolean mode) {
        this.devMode = mode;
    }

    public Sql genSql() {
        return new Sql(this);
    }

    // 리팩토링: run 메소드에 공통적인 코드를 executeSql 메소드로 분리
    private long executeSql(String sql, Object[] args, int autoGeneratedKeys) {
        if (devMode) {
            System.out.println("== rawSql ==");
            System.out.println(sql);
            System.out.println();
        }

        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys)) {

            for (int i = 0; i < args.length; i++) {
                preparedStatement.setObject(i + 1, args[i]);
            }

            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                preparedStatement.executeUpdate();
                ResultSet generatedKeys = preparedStatement.getGeneratedKeys();

                if (generatedKeys.next()) {
                    return generatedKeys.getLong(1);
                } else {
                    throw new RuntimeException("No generated key was returned after insert");
                }
            } else {
                return preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private long executeSql(String sql, Object[] args) {
        return executeSql(sql, args, Statement.NO_GENERATED_KEYS);
    }
    public void run(String sql, Object... args) {
        executeSql(sql, args);
    }

    public long runInsert(String sql, Object... args) {
        return executeSql(sql, args, Statement.RETURN_GENERATED_KEYS);
    }

    // runUpdate 메서드 추가
    public long runUpdate(String sql, Object[] args) {
        return executeSql(sql, args);
    }
}